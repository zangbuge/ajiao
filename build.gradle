buildscript {
    ext {
        UTF_8 = "UTF-8"
        JDK_V = 1.8
    }
}

group 'com.hugmount'
version '0.0.1-SNAPSHOT'

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'maven-publish'

sourceCompatibility = JDK_V
tasks.withType(JavaCompile) {
    options.encoding = UTF_8
}
tasks.withType(Javadoc) {
    options.encoding = UTF_8
}

repositories {
    mavenLocal()
    maven { url 'http://maven.aliyun.com/nexus/content/groups/public' }
    mavenCentral()
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.12'
    compile group: 'com.squareup', name: 'javawriter', version: '2.5.1'
    compile group: 'com.squareup', name: 'javapoet', version: '1.9.0'
    implementation 'com.google.auto.service:auto-service:1.0-rc6'
    compile group: 'com.alibaba', name: 'fastjson', version: '1.2.47'
    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.29'

    // 自定义start依赖
    implementation group: 'org.springframework.boot', name: 'spring-boot-autoconfigure', version: '2.4.9'

    // 路径相对build.gradle文件的路径
    // compile files('lib/tools.jar') // 单个文件, java8 jdk自带工具类
    compile fileTree(dir: 'src/main/resources/lib', include: ['*.jar'])

}

// 构建脚本里引用了maven的发布插件后, 此时gradle的控制台就会出现publishing选项
// 先点击 build -> build 再点击 publishToMavenLocal 即可发布到本地maven仓库,默认C:\Users\Administrator\.m2\settings.xml
// 点击自定义任务 publishMyPublishPublicationToMavenRepository 是发布到自定义配置的url地址中
// 发布成功后可以在本地仓库中查找到相应目录中的jar
publishing {
    repositories {
        maven {
            // 使用自定义目录作为仓库位置,可不指定使用默认
            url "file://D:/work/tool/maven/maven_repository"
        }
    }
    publications {
        myPublish(MavenPublication) {
            from components.java
        }
    }
}